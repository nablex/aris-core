// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------- MENU
// ---------------------------------------------------------------------------------------------------------------------------
// @component menu layout
// reset some defaults that a ul has if it acts as a grid row
// we want to make sure we generate with correct specificity so we can override this later
:where(ul).is-menu {
	padding: 0;
	margin: 0;
	> li {
		list-style: none;
	}
}
// ----------------------------------------- VARIANTS
$menu-top-background-color: $color-body;

// same as row
@mixin menu_variant_default {
	display: flex;
	@include component_direction_horizontal;
	@include layout_align_main-start;
	@include layout_align_cross-stretch;
}

// the toolbar is used throughout page builder etc
// it is a basic menu layout that has been added to the core for its vast applicability

// the top menu is mainly used at the top of a web application
@mixin menu_variant_toolbar {
	.has-children {
		cursor: pointer;
	}
	.is-label {
		@include component_spacing_medium;
	}
	// all columns must be relative to allow for absolute positioning
	.is-column {
		align-self: stretch;
		justify-content: center;
		position: relative;
		// the content (usually a button) should take up the full available width
		> * {
			// center content without specifically knowing whether it's flexed or not
			text-align: center;
			justify-content: center;
		}
		&:hover {
			// revert to flex display when hovering
			> .is-row {
				display: flex;
			}
		}
		// make sure it takes up all the space
		> .is-button {
			height: 100%;
		}
	}
	.is-row {
		width: 100%;
		display: none;
		padding: 0;
		@include component_direction_vertical;
	}
	> .is-column {
		> .is-row {
			// make sure we elevate it above most other things
			z-index: 10;
			position: absolute;
			top: 100%;
			left: 0;
			// the first level needs to be positioned at the bottom, all the other levels on the right
			.is-row {
				top: 0;
				left: 100%;
				position: absolute;
			}
		}

		// we assume the buttons (or whatever) in the visible row are right next to one another, we don't want a radius on that
		// we are not sure at this point if you are using border radius at all
		// but it you are, we only want a clean radius on the left most and right most buttons, the intermediate buttons should not have a radius
		&:not(:first-child):not(:last-child) {
			> .is-button {
				border-radius: 0;
			}
		}
		&:first-child:not(:last-child) {
			> .is-button {
				// we only _unset_ border radiuses, we don't set them
				// because we don't actually know if there are _any_ border radiuses
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;
			}
		}
		&:last-child:not(:first-child) {
			> .is-button {
				border-top-left-radius: 0;
				border-bottom-left-radius: 0;
			}
		}
		// for each intermediate child, we want to remove one border so they don't pile up (again, you might not be using borders at all)
		&:not(:last-child) {
			> .is-button {
				border-right: none;
			}
		}

		> .is-row {
			// the first layer is horizontal and permanently visible
			// the second layer is a pop-down from the first one, so we want the border radiuses on the top entry to be invisible
			> .is-column {
				&:not(:last-child) {
					> .is-button {
						border-radius: 0;
					}
				}
				// from layer 3 onwards, we keep opening to the right
				.is-column {
					&:not(:first-child):not(:last-child) {
						> .is-button {
							border-radius: 0;
						}
					}
					// if we are first _and_ last
					&:first-child:last-child {
						> .is-button {
							border-top-left-radius: 0;
							border-bottom-left-radius: 0;
						}
					}
					&:first-child:not(:last-child) {
						> .is-button {
							border-top-left-radius: 0;
							border-bottom-left-radius: 0;
							border-bottom-right-radius: 0;
						}
					}
				}
			}
			// this is the same for level 2 onwards
			.is-column {
				// from level 2 onwards, it layers over other content, some things (like outline buttons) don't have a standard background color, so we need to add one
				background-color: $menu-top-background-color;
				border-radius: $border-radius;
				&:last-child {
					> .is-button {
						border-top-left-radius: 0;
						border-top-right-radius: 0;
					}
				}
				&:not(:last-child) {
					> .is-button {
						border-bottom: none;
					}
				}
			}
		}
	}
}

// a dark toolbar
@mixin menu-toolbar_modifier_dark {
	background-color: $color-neutral-darkest; 
}
@mixin menu-toolbar_modifier_light {
	background-color: $color-body; 
	border-bottom: solid 1px $color-neutral-darker;
}
@mixin menu-toolbar_modifier_transparent {
	background-color: transparent; 
}
@mixin menu-toolbar_modifier_warning-highlight {
	.is-button {
		&.is-active {
			background-color: $color-warning-base;
			color: $color-warning-darkest;
		}
	}
	> .is-column > .is-button {
		&:hover:not(.is-active) {
			&:after {
				content: ' ';
				background-color: $color-warning-base;
				position: absolute;
				height: 5px;
				width: 100%;
				bottom: 0;
			}
		}
	}
}
@mixin menu-toolbar_modifier_success-highlight {
	.is-button {
		&.is-active {
			background-color: $color-success-base;
			color: $color-success-lightest;
		}
	}
	> .is-column > .is-button {
		&:hover:not(.is-active) {
			&:after {
				content: ' ';
				background-color: $color-success-base;
				position: absolute;
				height: 5px;
				width: 100%;
				bottom: 0;
			}
		}
	}
}
@mixin menu-toolbar_modifier_danger-highlight {
	.is-button {
		&.is-active {
			background-color: $color-danger-base;
			color: $color-danger-lightest;
		}
	}
	> .is-column > .is-button {
		&:hover:not(.is-active) {
			&:after {
				content: ' ';
				background-color: $color-danger-base;
				position: absolute;
				height: 5px;
				width: 100%;
				bottom: 0;
			}
		}
	}
}
@mixin menu-toolbar_modifier_primary-highlight {
	.is-button {
		&.is-active {
			background-color: $color-primary-base;
			color: $color-primary-lightest;
		}
	}
	// on the first row, we want to underline as well, on the nested rows we don't
	> .is-column > .is-button {
		&:hover:not(.is-active) {
			&:after {
				content: ' ';
				background-color: $color-primary-base;
				position: absolute;
				height: 5px;
				width: 100%;
				bottom: 0;
			}
		}
	}
}
@mixin menu-toolbar_modifier_secondary-highlight {
	.is-button {
		&.is-active {
			background-color: $color-secondary-base;
			color: $color-secondary-lightest;
		}
	}
	> .is-column > .is-button {
		&:hover:not(.is-active) {
			&:after {
				content: ' ';
				background-color: $color-secondary-base;
				position: absolute;
				height: 5px;
				width: 100%;
				bottom: 0;
			}
		}
	}
}
// a toolbar that acts as a main top menu to a page
@mixin menu-toolbar_modifier_main-top {
	z-index: 100;
	// if we don't set a specific content width, we add a padding
	&:not(.is-content-width-medium):not(.is-content-width-small):not(.is-content-width-large) {
		padding-left: $spacing-scale-medium;
		padding-right: $spacing-scale-medium;
	}
	height: 3rem;
	.is-button {
		height: 100%;
		padding-left: 1rem;
		padding-right: 1rem;
	}
}
.has-menu-toolbar-sticky {
	margin-top: 3rem;
}
@mixin menu-toolbar_modifier_sticky {
	position: fixed;
	top: 0;
	width: 100%;
	transition: position 0.3s linear, top 0.3s linear;
}

@mixin menu-toolbar_modifier_embedded {
	position: absolute;
	right: 0;
	top: 0;
}