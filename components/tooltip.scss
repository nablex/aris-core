// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------- TOOLTIP
// ---------------------------------------------------------------------------------------------------------------------------

// for tooltips, we do sneaky stuff!
// you can do tooltips with an attribute which works splendidly and is clean but does NOT allow for HTML content
// you can do tooltips with a nested span which allows for HTML content
// however, when using a nested span, if we want an arrow, it is hard to position correctly on that span unless we fix dimensions on the span so we know for example exactly how wide it is
// so in short: we always want to position the arrow on the parent, that means that the parent has to know which side the tooltip is on
// we want to allow pure attribute-driven tooltips _and_ for more complex usecases the nested span
// when using the nested span, we can leave out the attribute, which floats the arrow and a box smaller than the actual tooltip which is rendered over it

$tooltip-max-width: 300px;
$tooltip-arrow-size: 5px;
$tooltip-z-index: 15;

.has-tooltip {
	position: relative;

	// for attr-based hovering
	&:before, &:after {
		z-index: $tooltip-z-index;
		position: absolute;
		visibility: hidden;
		opacity: 0;
	}
	&:after {
		content: "";
		border-width: $tooltip-arrow-size;
		border-style: solid;
		border-color: $color-neutral-darkest transparent transparent transparent;

		// we assume default top
		top: -$tooltip-arrow-size;
		left: 50%;
	}
	&:hover {
		&:before, &:after, > .is-tooltip {
			opacity: 1;
			transition: opacity 300ms, visibility 300ms;
			visibility: visible;
		}
	}
}
// only show this if we have the attribute, otherwise because of the transitioning there is an effect where we can perceive the empty before before the actual tooltip pops in
.has-tooltip[tooltip] {
	&:before {
		// we read the attribute, if it does not exist this is still rendered but as a small box with only padding
		content: attr(tooltip);

		// we assume default is top
		left: 0;
		top: 0;
	}
}

// applies to both the html tooltip and the inline one
.has-tooltip:before, .is-tooltip {
	@include padded-content_size-small;
	@include component_color_dark;
	@include content_size-small;

	// make sure it tries to maximize the width
	width: max-content; 
	max-width: $tooltip-max-width;

	padding: $spacing-scale-small;
	border-radius: $border-radius;
	text-align: center;

	visibility: hidden;
	opacity: 0;
	position: absolute;
	
	// defaults to top
	top: unset;
	right: unset;
	bottom: calc(100% + #{$tooltip-arrow-size});
	left: 50%;
	margin-left: -50%;
}

.tooltip-position-bottom {
	&:before, &:after {
		top: 100%;
		transform: none;
		left: calc(50% - (#{$tooltip-arrow-size} / 2));
	}
	&:before {
		margin-top: $tooltip-arrow-size;
	}
	&:after {
		margin-top: -$tooltip-arrow-size;
		border-color: transparent transparent $color-neutral-darkest transparent;
	}
	.is-tooltip {
		bottom: unset;
		right: unset;
		top: 100%;
		left: 0%;
		margin-top: $tooltip-arrow-size;
	}
}

.tooltip-position-right {
	&:before, &:after {
		top: calc(50% - #{$tooltip-arrow-size});
		left: 100%;
	}
	&:before {
		margin-left: $tooltip-arrow-size;
	}
	&:after {
		margin-left: -$tooltip-arrow-size;
		border-color: transparent $color-neutral-darkest transparent transparent;
	}
	.is-tooltip {
		bottom: unset;
		right: unset;
		// we want this to hover at the center as well because that's where the arrow will be
		top: calc(50% - #{$font-size-medium});
		left: 100%;
		margin-left: $tooltip-arrow-size;
	}
}

.tooltip-position-left {
	&:before, &:after {
		top: calc(50% - #{$tooltip-arrow-size});
		left: unset;
		right: calc(100% - #{$tooltip-arrow-size});
	}
	&:before {
		margin-left: $tooltip-arrow-size;
	}
	&:after {
		border-color: transparent transparent transparent $color-neutral-darkest;
	}
	.is-tooltip {
		bottom: unset;
		left: unset;
		top: calc(50% - #{$font-size-medium});
		right: calc(100% + #{$tooltip-arrow-size});
	}
}

// we don't include a default position, there is too much to override (like the margins etc)
.is-tooltip {
	z-index: calc(#{$tooltip-z-index} + 1);
}
