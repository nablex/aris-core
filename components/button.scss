// a button is assumed to be one of these:
// <button>some text</button>
// <button><span class="is-icon"></span></button>
// <button><span class="is-label"></span></button>
// <button><span class="is-icon"></span><span class="is-label"></span></button>

// Note that we assume the icon is on the _left_ side of the label if both are present though we try to hard to not be aware of this fact

// @component button padded-content
// ----------------------------------------- COLORS

@mixin button_color_primary {
	@include component_highlight_primary;
}
@mixin button_color_primary-outline {
	@include component_highlight_primary-outline;
}
@mixin button_color_secondary {
	@include component_highlight_secondary;
}
@mixin button_color_secondary-outline {
	@include component_highlight_secondary-outline;
}
@mixin button_color_transparent {
	@include component_highlight_transparent;
}
@mixin button_color_transparent-light {
	@include component_highlight_transparent-light;
}
@mixin button_color_danger {
	@include component_highlight_danger;
}
@mixin button_color_danger-outline {
	@include component_highlight_danger-outline;
}
@mixin button_color_warning {
	@include component_highlight_warning;
}
@mixin button_color_warning-outline {
	@include component_highlight_warning-outline;
}
@mixin button_color_info {
	@include component_highlight_info;
}
@mixin button_color_info-outline {
	@include component_highlight_info-outline;
}
@mixin button_color_success {
	@include component_highlight_success;
}
@mixin button_color_success-outline {
	@include component_highlight_success-outline;
}
@mixin button_color_dark {
	@include component_highlight_dark;
}
@mixin button_color_light {
	@include component_highlight_light;
}

$button-link-color: $color-primary-darker;
@mixin button_color_link {
	background-color: transparent;
	color: $button-link-color;
	border-color: transparent;
	&:not([disabled]):hover, &.is-active {
		background-color: transparent;
		color: darken($button-link-color, 30%);
		border-color: transparent;
	}
}

// overwrite the default border width of 1px, that way it matches visualize when combined with buttons that only have a single border of 1px at the top as well
@mixin button_border_underline {
	border-width: 2px;
}

// some tiny corrections
@mixin button-fix-icon {
	// > .is-text {
	// 	white-space: nowrap;
	// }
}

// ----------------------------------------- VARIANTS

@mixin button_variant_default {
	cursor: pointer;
	* {
		cursor: pointer;
	}
	// we use inline flex so we can easily position the icon and text with a gap without having to know which are present
	// additionally it makes it easy to reverse the order
	display: inline-flex;
	align-items: center;
	
	@include content_size_medium;
	@include padded-content_size_medium;
	
	@include content_decoration_normal;
	
	@include content-fix-icon;
	@include button-fix-icon;
	@include component_color_light;
	@include button_color_light;
	@include component_border_full;

	&:disabled {
		opacity: 0.5;
	}
}

@mixin button_variant_link {
	@include component_spacing_horizontal-left-none;
	@include component_spacing_horizontal-right-none;
	@include button_color_link;
	@include content_decoration_link;
}


// if we put a badge in a button, we need to counter the padding we add at the top otherwise we slightly stretch the button making it a tiny bit bigger than other buttons
// TODO: this is not full proof, for example if we absolutely position it etc
// also, we need to counter the exact padding, so it depends on the chosen size... that's requires some very specific queries
.is-button {
	> .is-badge {
		margin-top: calc(0px - #{$spacing-scale-xxsmall});
	}
	> .is-badge.is-size-small {
		margin-top: calc(0px - #{$spacing-scale-xsmall});
	}
	> .is-badge.is-size-medium {
		margin-top: calc(0px - #{$spacing-scale-small});
	}
	> .is-badge.is-size-large {
		margin-top: calc(0px - #{$spacing-scale-medium});
	}
	> .is-badge.is-size-xlarge {
		margin-top: calc(0px - #{$spacing-scale-large});
	}
}


@mixin button_variant_neutral {
	@include button_color_light;
}
@mixin button_variant_primary {
	@include button_color_primary;
}
@mixin button_variant_secondary {
	@include button_color_secondary;
}
@mixin button_variant_primary-outline {
	@include button_color_primary-outline;
}
@mixin button_variant_secondary-outline {
	@include button_color_secondary-outline;
}
@mixin button_variant_ghost {
	@include button_color_transparent;
}
@mixin button_variant_ghost-light {
	@include button_color_transparent-light;
}
@mixin button_variant_info {
	@include button_color_info;
}
@mixin button_variant_info-outline {
	@include button_color_info-outline;
}
@mixin button_variant_warning {
	@include button_color_warning;
}
@mixin button_variant_warning-outline {
	@include button_color_warning-outline;
}
@mixin button_variant_danger {
	@include button_color_danger;
}
@mixin button_variant_danger-outline {
	@include button_color_danger-outline;
}
@mixin button_variant_success {
	@include button_color_success;
}
@mixin button_variant_success-outline {
	@include button_color_success-outline;
}

@mixin button_variant_tab {
	border-style: none none solid none;
	border-radius: 0;
	border-bottom-color: $color-secondary-base;
	border-bottom-width: 2px;
	background-color: transparent;
	&.is-active {
		border-bottom-color: $color-primary-base;
		background-color: transparent;
	}
}

@mixin button_variant_close {
	@include component_color_transparent;
	@include button_color_transparent;
	@include component_border_none;
	// by default a small button
	@include content_size_small;
	@include padded-content_size_small;
	position: absolute;
	top: $spacing-scale-small;
	right: $spacing-scale-small;
}

.has-button-close {
	position: relative;
}