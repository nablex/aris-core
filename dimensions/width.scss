// we have a grid of 12 columns
// we have 3 breakpoints: phone, tablet, desktop
// desktop and above supports 12 columns
// [tablet, desktop[ supports 6 columns
// [phone, tablet[ supports 3 columns
// [.., phone[ supports 2 columns
// each element can be assigned a number of columns it wants

// an additional problem is the column gap which we don't have under control
// even we for instance want to have two columns, each at 50% in a row
// that's fine, until the row adds a column gap of even 1px
// this will cause the second 50% column to wrap to the next line (assuming wrap is on)
// without wrapping, there is less use from a responsive point of view

// even if we knew the column gap size, we wouldn't know how many cells are in a particular row
// one approach (used here) is instead of setting the "width" to 50%
// we set the min width to something sufficiently above the next level but below the max to accomodate for variable column gaps up to a certain size
// we then set flex-grow to 1 with no basis
// this means we can predictably state that it will fill the size we wanted

// I tested in firefox and chrome (@27-05-2022) and both gave the correct result EXCEPT in a particular case
// suppose we have two column-6 on a desktop (so we want 50% each)
// we want a column and row gap of 16pixels.
// we want to set wrapping on the row so it can cleanly resize for responsive
// as mentioned above, if we set hard 50%, it will overflow to the next
// if we set the below rules, we consistently had equal division of space EXCEPT when one of the cells had a _different_ horizontal padding from the other
// if both have the same horizontal padding (vertical doesn't matter) it works (whether that is no padding at all or a particular padding)
// once they have different padding, the column gap is deducted more from the side with the least padding
// no padding (or the same padding) resulted in both sides being exactly 902.5px
// once we bring a difference in padding, for example we set a padding-right of 1pixel on the left one, we get 903px width left and 902px right 
// if we set padding-left of 10pixels on the left one, it is 907.5px and the right one is 897.5px
// this means the following grid approach should be pixel perfect if we keep track of the padding on the columns themselves

// note that this is NOT pixel perfect across wrapped rows unless they are fully padded
// so if (through wrapping) you have 3 items (set at width 4) on one row and the last one on the next line
// this last one will be slightly wider because there is no column gap to compensate for
// the only way to ensure this doesn't happen is to make sure you always have "full" rows using empty content as needed
// in other words: the sum of all your configured columns _must_ be a multiple of 12

// width 12 is always 100%, regardless of screen size
@mixin column_width_12 {
	// always grow, otherwise our cell settings don't work
	flex-grow: 1;
	flex-basis: 0;
	min-width: 95%;
	max-width: 100%;
}
// any column between [6-11] is also 100% on anything smaller than a desktop
// note that the max-width is inclusive
@mixin column_width_11 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 86.66%;
	max-width: 91.66%;
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_10 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 78.33%;
	max-width: 83.33%;
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_9 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 69%;
	max-width: 75%;
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
// on a tablet, 8 columns is 100%
@mixin column_width_8 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 61.66%;
	max-width: 66.66%;
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_7 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 53.33%;
	max-width: 58.33%;
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_6 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 55%;
	max-width: 50%;
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_5 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 36.66%;
	max-width: 41.66%;
	// between tablet and desktop, this takes up 5/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 67%;
		max-width: 83.3%;
	}
	// below tablet, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_4 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 28.33%;
	max-width: 33.33%;
	// between tablet and desktop, this takes up 4/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 56.6%;
		max-width: 66.6%;
	}
	// below tablet, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_3 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 20%;
	max-width: 25%;
	// between tablet and desktop, this takes up 3/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 40%;
		max-width: 50%;
	}
	// below tablet, it takes up 3/3
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) and (min-width: map-get($breakpoints, "phone")) {
		min-width: 90%;
		max-width: 100%;
	}
	// below phone, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-phone")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_2 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 11.66%;
	max-width: 16.66%;
	// between tablet and desktop, this takes up 2/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 23.3%;
		max-width: 33.3%;
	}
	// below tablet, it takes up 2/3
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) and (min-width: map-get($breakpoints, "phone")) {
		min-width: 56.6%;
		max-width: 66.6%;
	}
	// below phone, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-phone")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_1 {
	flex-grow: 1;
	flex-basis: 0;
	max-width: 8.33%;
	// between tablet and desktop, this takes up 1/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		max-width: 16.6%;
	}
	// below tablet, it takes up 1/4
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) and (min-width: map-get($breakpoints, "phone")) {
		max-width: 33.3%;
	}
	// below phone, it takes up half
	@media only screen and (max-width: map-get($breakpoints, "below-phone")) {
		max-width: 50%;
	}
}